{"version":3,"sources":["_contasts/alert.constants.js","_contasts/user.constants.js","_actions/alert.actions.js","baseURL.js","_services/user.services.js","_actions/user.actions.js","Home/HomeComponent.js","MainComponent.js","_reducers/classify.reducer.js","_reducers/index.js","_helpers/store.js","_reducers/alert.reducer.js","App.js","serviceWorker.js","index.js","Assets/reddit_logo.png"],"names":["alertConstants","userConstants","alertActions","success","message","type","error","clear","userService","classify","link","data","url","Axios","method","baseUrl","headers","withCredentials","then","response","status","Promise","reject","err","userActions","dispatch","requestclassify","classifysuccess","classifyfailure","toString","payload","errMess","Home","props","handleInputChange","event","target","value","name","setState","handleSubmit","errors","e","preventDefault","submitted","state","touched","handleBlur","field","evt","openUrl","window","open","onDismiss","visible","this","length","startsWith","alert","validate","isLoading","className","src","reddit","alt","style","height","width","WebkitBorderRadius","marginBottom","marginTop","color","sm","lg","size","offset","md","backgroundColor","borderColor","tag","marginRight","link_flair_text","predicted_flair","title","selftext","cursor","onClick","isOpen","toggle","background","borderBlockColor","id","valid","invalid","onBlur","placeholder","onChange","block","Component","connectedHomePage","connect","Main","path","component","to","initialState","store","rootReducer","combineReducers","action","createLogger","createStore","applyMiddleware","thunkMiddleware","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","module","exports"],"mappings":"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","file":"static/js/main.6e97a444.chunk.js","sourcesContent":["export const alertConstants = {\r\n    SUCCESS: 'ALERT_SUCCESS',\r\n    ERROR: 'ALERT_ERROR',\r\n    CLEAR: 'ALERT_CLEAR'\r\n};","export const userConstants = {\r\n    CLASSIFY_REQUEST: 'CLASSIFY_REQUEST',\r\n    CLASSIFY_SUCCESS: 'CLASSIFY_SUCCESS',\r\n    CLASSIFY_FAILURE: 'CLASSIFY_FAILURE'\r\n};","import { alertConstants } from '../_contasts';\r\n\r\nexport const alertActions = {\r\n    success,\r\n    error,\r\n    clear\r\n};\r\n\r\nfunction success(message) {\r\n    return { type: alertConstants.SUCCESS, message };\r\n}\r\n\r\nfunction error(message) {\r\n    return { type: alertConstants.ERROR, message };\r\n}\r\n\r\nfunction clear() {\r\n    return { type: alertConstants.CLEAR };\r\n}","// export const baseUrl = 'http://127.0.0.1:5000/';\r\nexport const baseUrl = 'https://reddit-flask-app.herokuapp.com/';","import { baseUrl } from '../baseURL';\r\nimport Axios from 'axios';\r\n\r\nexport const userService = {\r\n    classify\r\n};\r\n\r\nfunction classify(link) {\r\n    const url = baseUrl + 'predict';\r\n    const data = {\r\n        url: link\r\n    }\r\n    return Axios({\r\n        method: 'post',\r\n        url: url,\r\n        data: data,\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        withCredentials: true\r\n    }).then(response => {\r\n        if (response.status === 200) {\r\n            return response.data;\r\n        }\r\n        else {\r\n            const error = (response.data) || response.status;\r\n            return Promise.reject(error);\r\n        }\r\n    }, error => {\r\n        const err = error.response.status;\r\n        return Promise.reject(err);\r\n    });\r\n}","import { userConstants } from '../_contasts';\r\nimport { userService } from '../_services';\r\nimport { alertActions } from './';\r\n\r\nexport const userActions = {\r\n    classify\r\n};\r\n\r\nfunction classify(url) {\r\n    return dispatch => {\r\n        dispatch(requestclassify({ url }));\r\n\r\n        userService.classify(url)\r\n            .then(\r\n                data => {\r\n                    dispatch(classifysuccess(data));\r\n                },\r\n                error => {\r\n                    dispatch(classifyfailure(error.toString()));\r\n                    //console.log(error.toString());\r\n                    dispatch(alertActions.error('Oops! There was an error. Please try again, later.'));\r\n                }\r\n            );\r\n    };\r\n}\r\n\r\nexport const requestclassify = () => { return { type: userConstants.CLASSIFY_REQUEST } }\r\nexport const classifysuccess = (data) => { return { type: userConstants.CLASSIFY_SUCCESS, payload: data } }\r\nexport const classifyfailure = (errMess) => { return { type: userConstants.CLASSIFY_FAILURE, payload: errMess } }\r\n","import React, { Component } from 'react';\r\nimport {\r\n    Input, Form, FormGroup,\r\n    FormFeedback, Alert,\r\n    Container, Button,\r\n    Row, Col, Label, Card,\r\n    CardBody, CardText, CardFooter, CardHeader\r\n} from 'reactstrap';\r\nimport reddit from '../Assets/reddit_logo.png'\r\nimport Loader from 'react-loader-spinner';\r\nimport { connect } from 'react-redux';\r\nimport { userActions } from '../_actions';\r\nimport { alertActions } from '../_actions';\r\n\r\nclass Home extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            url: '',\r\n            touched: {\r\n                url: false\r\n            },\r\n            submitted: false,\r\n            visible: true\r\n        };\r\n    }\r\n\r\n    handleInputChange = (event) => {\r\n        const target = event.target;\r\n        const value = target.value;\r\n        const name = target.name;\r\n\r\n        this.setState({\r\n            [name]: value\r\n        });\r\n    }\r\n\r\n    handleSubmit = (errors) => (e) => {\r\n        e.preventDefault();\r\n\r\n        this.setState({\r\n            submitted: true\r\n        })\r\n\r\n        if (this.state.touched.url) {\r\n            if (errors.url === '') {\r\n                const url = this.state.url;\r\n                const { dispatch } = this.props;\r\n                dispatch(userActions.classify(url));\r\n            }\r\n        }\r\n    }\r\n\r\n    handleBlur = (field) => (evt) => {\r\n        this.setState({\r\n            touched: { ...this.state.touched, [field]: true },\r\n        });\r\n    }\r\n\r\n    openUrl = (url) => {\r\n        window.open(url, \"_blank\")\r\n    }\r\n\r\n    validate(url) {\r\n        const errors = {\r\n            url: ''\r\n        }\r\n\r\n        if (this.state.touched.url) {\r\n            if (0 === url.length) {\r\n                errors.url = 'Reddit post\\'s urls begin with https://www.reddit.com/'\r\n            }\r\n            else if (!url.startsWith(\"https://www.reddit.com\")) {\r\n                errors.url = 'Reddit post\\'s urls begin with https://www.reddit.com/'\r\n            }\r\n        }\r\n        else {\r\n            if (this.state.submitted && 0 === url.length) {\r\n                errors.url = 'Reddit post\\'s urls begin with https://www.reddit.com/'\r\n            }\r\n        }\r\n\r\n        return errors;\r\n    }\r\n\r\n    onDismiss = () => {\r\n        const { dispatch } = this.props;\r\n        dispatch(alertActions.clear());\r\n    }\r\n\r\n    render() {\r\n        const { alert } = this.props;\r\n        const errors = this.validate(this.state.url);\r\n\r\n        if (this.props.classify.isLoading) {\r\n            return (\r\n                <div>\r\n                    <Container className=\"App\">\r\n                        <img src={reddit} alt=\"Reddit logo\" style={{ height: 'auto', width: '200px', WebkitBorderRadius: '50%', marginBottom: \"10px\", marginTop: \"50px\" }} />\r\n                        <h3 style={{ color: \"#EFEFED\", marginBottom: \"10px\" }}>Reddit flair classifier</h3>\r\n                        <Row>\r\n                            <Col sm=\"12\" lg={{ size: 6, offset: 3 }} md={{ size: 6, offset: 3 }}>\r\n                                <Loader type=\"ThreeDots\" color=\"#EFEFED\" height={100} width={100} />\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n            )\r\n        }\r\n        else if (this.props.classify.data) {\r\n            return (\r\n                <div>\r\n                    <Container className=\"App\">\r\n                        <img src={reddit} alt=\"Reddit logo\" style={{ height: 'auto', width: '200px', WebkitBorderRadius: '50%', marginBottom: \"10px\", marginTop: \"50px\" }} />\r\n                        <h3 style={{ color: \"#EFEFED\", marginBottom: \"20px\" }}>Reddit flair classifier</h3>\r\n                        <div style={{ marginBottom: \"50px\" }}>\r\n                            <Row>\r\n                                <Col sm=\"12\" lg={{ size: 8, offset: 2 }} md={{ size: 8, offset: 2 }}>\r\n                                    <Card style={{ backgroundColor: \"#222222\", borderColor: \"#545452\" }}>\r\n                                        <CardHeader style={{ backgroundColor: \"#545452\" }} tag=\"h5\">\r\n                                            <Label style={{ color: \"#EFEFED\", marginRight: \"20px\" }}>\r\n                                                Actual flair: {this.props.classify.data.link_flair_text}\r\n                                            </Label>\r\n                                            {this.props.classify.data.link_flair_text !== \"None\" ?\r\n                                                this.props.classify.data.link_flair_text === this.props.classify.data.predicted_flair ?\r\n                                                    <Label style={{ color: \"#3BCB56\" }}>Predicted flair: {this.props.classify.data.predicted_flair}</Label> :\r\n                                                    <Label style={{ color: \"#ED001C\" }}>Predicted flair: {this.props.classify.data.predicted_flair}</Label> :\r\n                                                <Label style={{ color: \"#EFEFED\" }}>Predicted flair: {this.props.classify.data.predicted_flair}</Label>\r\n                                            }\r\n                                        </CardHeader>\r\n                                        <CardBody>\r\n                                            <CardText style={{ color: \"#EFEFED\" }}>{this.props.classify.data.title}</CardText>\r\n                                            <CardText>\r\n                                                {this.props.classify.data.selftext === \"\" ?\r\n                                                    <span style={{ color: \"#A5A4A4\" }}>This post has no body</span> :\r\n                                                    <span style={{ color: \"#EFEFED\" }}>{this.props.classify.data.selftext}</span>\r\n                                                }\r\n                                            </CardText>\r\n                                        </CardBody>\r\n                                        <CardFooter style={{ backgroundColor: \"#545452\" }}>\r\n                                            <Label style={{ color: \"#A5A4A4\", cursor: \"pointer\" }} onClick={() => this.openUrl(this.state.url)}>Go to the post</Label>\r\n                                        </CardFooter>\r\n                                    </Card>\r\n                                </Col>\r\n                            </Row>\r\n                        </div>\r\n                        <Row style={{ marginBottom: \"20px\" }}>\r\n                            <Col sm=\"12\" lg={{ size: 6, offset: 3 }} md={{ size: 6, offset: 3 }}>\r\n                                <h3 style={{ color: \"#EFEFED\", marginBottom: \"20px\" }}>Classify more posts!</h3>\r\n                                {alert.message &&\r\n                                    <Alert color={alert.type} isOpen={true} toggle={this.onDismiss}>{alert.message}</Alert>\r\n                                }\r\n                                <Form>\r\n                                    <FormGroup>\r\n                                        <Input style={{ marginBottom: \"10px\", background: \"#222222\", color: \"#EFEFED\", borderBlockColor: \"#545452\" }}\r\n                                            type=\"url\" id=\"url\" name=\"url\"\r\n                                            value={this.state.url}\r\n                                            valid={errors.url === ''}\r\n                                            invalid={errors.url !== ''}\r\n                                            onBlur={this.handleBlur('url')}\r\n                                            placeholder=\"Enter a Reddit post's URL\"\r\n                                            onChange={this.handleInputChange} />\r\n                                        <FormFeedback>{errors.url}</FormFeedback>\r\n                                    </FormGroup>\r\n                                    <FormGroup>\r\n                                        <Button onClick={this.handleSubmit(errors, \"log\")} type=\"submit\" style={{ borderColor: \"#0077D6\", backgroundColor: \"#0077D6\", color: \"#EFEFED\" }} block>Classify me!</Button>\r\n                                    </FormGroup>\r\n                                </Form>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div >\r\n            )\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Container className=\"App\">\r\n                    <img src={reddit} alt=\"Reddit logo\" style={{ height: 'auto', width: '200px', WebkitBorderRadius: '50%', marginBottom: \"10px\", marginTop: \"50px\" }} />\r\n                    <h3 style={{ color: \"#EFEFED\", marginBottom: \"10px\" }}>Reddit flair classifier</h3>\r\n                    <Row>\r\n                        <Col sm=\"12\" lg={{ size: 6, offset: 3 }} md={{ size: 6, offset: 3 }}>\r\n                            {alert.message &&\r\n                                <Alert color={alert.type} isOpen={true} toggle={this.onDismiss}>{alert.message}</Alert>\r\n                            }\r\n                            <Form>\r\n                                <FormGroup>\r\n                                    <Input style={{ marginBottom: \"10px\", background: \"#222222\", color: \"#EFEFED\", borderBlockColor: \"#545452\" }}\r\n                                        type=\"url\" id=\"url\" name=\"url\"\r\n                                        value={this.state.url}\r\n                                        valid={errors.url === ''}\r\n                                        invalid={errors.url !== ''}\r\n                                        onBlur={this.handleBlur('url')}\r\n                                        placeholder=\"Enter a Reddit post's URL\"\r\n                                        onChange={this.handleInputChange} />\r\n                                    <FormFeedback>{errors.url}</FormFeedback>\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Button onClick={this.handleSubmit(errors)} type=\"submit\" style={{ borderColor: \"#0077D6\", backgroundColor: \"#0077D6\", color: \"#EFEFED\" }} block>Classify me!</Button>\r\n                                </FormGroup>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n    return {\r\n        classify: state.classify,\r\n        alert: state.alert\r\n    };\r\n}\r\n\r\nconst connectedHomePage = connect(mapStateToProps)(Home);\r\nexport { connectedHomePage as Home }; ","import React, { Component } from 'react';\r\nimport { HashRouter, Switch, Route, Redirect } from 'react-router-dom';\r\nimport { Home } from './Home/HomeComponent'\r\n\r\nclass Main extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <HashRouter>\r\n                <Switch>\r\n                    <Route path=\"/home\" component={Home} />\r\n                    <Redirect to=\"/home\" />\r\n                </Switch>\r\n            </HashRouter>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main; ","import { userConstants } from '../_contasts';\r\n\r\nconst initialState = { isLoading: false, errMess: null, data: null };\r\n\r\nexport function classify(state = initialState, action) {\r\n  switch (action.type) {\r\n    case userConstants.CLASSIFY_REQUEST:\r\n      return { ...state, isLoading: true, errMess: null, data: null };\r\n\r\n    case userConstants.CLASSIFY_SUCCESS:\r\n      return { ...state, isLoading: false, errMess: null, data: action.payload };\r\n\r\n    case userConstants.CLASSIFY_FAILURE:\r\n      return { ...state, isLoading: false, errMess: action.payload, data: null };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}","import { combineReducers } from 'redux';\r\n\r\nimport { classify } from './classify.reducer';\r\nimport { alert } from './alert.reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n  classify,\r\n  alert\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger';\r\nimport rootReducer from '../_reducers';\r\n\r\n// eslint-disable-next-line\r\nconst loggerMiddleware = createLogger();\r\n\r\nvar store;\r\n\r\nif(process.env.NODE_ENV === 'development'){\r\n    // console.log(\"Development env\");\r\n    store = createStore(\r\n        rootReducer,\r\n        applyMiddleware(\r\n            thunkMiddleware,\r\n            loggerMiddleware\r\n        )\r\n    );\r\n}\r\nelse{\r\n    store = createStore(\r\n        rootReducer,\r\n        applyMiddleware(\r\n            thunkMiddleware\r\n        )\r\n    );\r\n}\r\n\r\nexport {store};","import { alertConstants } from '../_contasts';\r\n\r\nexport function alert(state = {}, action) {\r\n  switch (action.type) {\r\n    case alertConstants.SUCCESS:\r\n      return {\r\n        type: 'success',\r\n        message: action.message\r\n      };\r\n    case alertConstants.ERROR:\r\n      return {\r\n        type: 'danger',\r\n        message: action.message\r\n      };\r\n    case alertConstants.CLEAR:\r\n      return {};\r\n    default:\r\n      return state\r\n  }\r\n}","import React from 'react';\nimport Main from './MainComponent';\nimport './App.css';\nimport { store } from './_helpers';\nimport { Provider } from 'react-redux';\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <div>\n        <Main />\n      </div>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css'; \n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/reddit_logo.7dbc3631.png\";"],"sourceRoot":""}